#include <OneWire.h>
#include <sched.h>
#include <asm/mman.h>

OneWire  ds(GPIO14);
void setup(void) {
	setbuf(stdout, NULL); 
    //printf("Init realtime environment\n");
  if (geteuid() == 0) {
       struct sched_param sp;
       memset(&sp, 0, sizeof(sp));
       sp.sched_priority = sched_get_priority_max(SCHED_FIFO);
       sched_setscheduler(0, SCHED_FIFO, &sp);
      // fprintf(stderr, "Running with realtime priority!\n");
    } else {
      //  fprintf(stderr, "Not running with realtime priority.\n");
    }
}

void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  type_s = 0;
  float celsius;
  
  if ( !ds.search(addr)) {
    ds.reset_search();
    delay(250);
    return;
  }
   printf("{");
   
   printf("\"id\":\"");
  for( i = 0; i < 8; i++) {
    //printf(" ");
    printf("%x", addr[i]);
  }
printf("\",");
//
  if (OneWire::crc8(addr, 7) != addr[7]) {
  printf("\"crc_error\":1,");
	 
      //return;
  }
  

  ds.reset();
  ds.select(addr);
  ds.write(0x44);
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE); 

  for ( i = 0; i < 9; i++) { 
    data[i] = ds.read();
  }

  if (OneWire::crc8(data, 8) != data[8]) {
    printf("\"error\":1,");
  }
// printf("\n");

  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3;
    if (data[7] == 0x10) {

      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    if (cfg == 0x00) raw = raw & ~7;
    else if (cfg == 0x20) raw = raw & ~3;
    else if (cfg == 0x40) raw = raw & ~1;
  }
  celsius = (float)raw / 16.0;
 
  printf("\"t\":");
  printf("%f", celsius);
  
   printf("}");
 printf("\n");
  delay(1000);
}
